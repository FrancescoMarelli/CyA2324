@startuml
    class Symbol  {
        std::string name
    }

    class String {
        std::vector<Symbol> string
    } 

    class Alphabet {
        std::set<Symbol> symbol
    }

    class Automaton {
 private:
    Alphabet alphabet_;
    std::set<State> stateSet_;
    State startingState_;
    int howManyStates_;
    std::set<Transition> transition_;
    State currentState_;

 public:
    explicit Automaton(std::ifstream&);
    Automaton();
    ~Automaton() {}

    void setAlphabet(const Alphabet& alphabet) { alphabet_.setAlphabet(alphabet.getAlphabet()); }
    Alphabet getAlphabet() { return alphabet_; }
    void setStatesCount(std::string howManyStates);
    State getState(std::string);
    void setStartingState(std::string state);
    std::set<Transition> getTransition() { return transition_; }
    int getSize() { return stateSet_.size(); }

    void addTransition(Transition transition);
    void addState(State state);

    bool isAccepted(std::set<State>);

    void buildAutomaton(std::ifstream&);
    void elaborateStrings(std::ifstream&);
    void checkStrings(std::vector<String>&);

    std::vector<std::string> linesReader(std::ifstream&);
    void alphabetReader(std::string);
    void statesCounterReader(std::string);
    void startingStateReader(std::string);
    void statesReader(std::vector<std::string>);
    void transitionsReader(std::string);
    std::vector<String> stringsReader(std::vector<std::string>&);

    Automaton SubSetConstruction();
    State createDFAState(const std::set<State>&, std::map<std::set<State>, State>&, std::queue<std::set<State>>&);
    std::set<State> eClosure(const State& state);
    std::set<State> move(const State&, const Symbol&);
    void setDFAFinals(const std::map<std::set<State>, State>&);
    void setDFAProperties(std::map<std::set<State>, State>& , const std::set<State>&, Alphabet);
    bool isDFA(); 
    void outputDFA(std::ofstream&);
}

    class Transition {
        State from
        State to
        Symbol symbol


    }

    class State {
        std::string label
        int type
    }





@enduml